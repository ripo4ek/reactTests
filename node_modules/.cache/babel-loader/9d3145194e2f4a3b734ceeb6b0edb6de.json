{"ast":null,"code":"'use strict'; // Declare internals\n\nconst internals = {};\n\nexports.escapeHtml = function (input) {\n  if (!input) {\n    return '';\n  }\n\n  let escaped = '';\n\n  for (let i = 0; i < input.length; ++i) {\n    const charCode = input.charCodeAt(i);\n\n    if (internals.isSafe(charCode)) {\n      escaped += input[i];\n    } else {\n      escaped += internals.escapeHtmlChar(charCode);\n    }\n  }\n\n  return escaped;\n};\n\nexports.escapeJson = function (input) {\n  if (!input) {\n    return '';\n  }\n\n  const lessThan = 0x3C;\n  const greaterThan = 0x3E;\n  const andSymbol = 0x26;\n  const lineSeperator = 0x2028; // replace method\n\n  let charCode;\n  return input.replace(/[<>&\\u2028\\u2029]/g, match => {\n    charCode = match.charCodeAt(0);\n\n    if (charCode === lessThan) {\n      return '\\\\u003c';\n    }\n\n    if (charCode === greaterThan) {\n      return '\\\\u003e';\n    }\n\n    if (charCode === andSymbol) {\n      return '\\\\u0026';\n    }\n\n    if (charCode === lineSeperator) {\n      return '\\\\u2028';\n    }\n\n    return '\\\\u2029';\n  });\n};\n\ninternals.escapeHtmlChar = function (charCode) {\n  const namedEscape = internals.namedHtml[charCode];\n\n  if (typeof namedEscape !== 'undefined') {\n    return namedEscape;\n  }\n\n  if (charCode >= 256) {\n    return '&#' + charCode + ';';\n  }\n\n  const hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');\n  return `&#x${hexValue};`;\n};\n\ninternals.isSafe = function (charCode) {\n  return typeof internals.safeCharCodes[charCode] !== 'undefined';\n};\n\ninternals.namedHtml = {\n  '38': '&amp;',\n  '60': '&lt;',\n  '62': '&gt;',\n  '34': '&quot;',\n  '160': '&nbsp;',\n  '162': '&cent;',\n  '163': '&pound;',\n  '164': '&curren;',\n  '169': '&copy;',\n  '174': '&reg;'\n};\n\ninternals.safeCharCodes = function () {\n  const safe = {};\n\n  for (let i = 32; i < 123; ++i) {\n    if (i >= 97 || // a-z\n    i >= 65 && i <= 90 || // A-Z\n    i >= 48 && i <= 57 || // 0-9\n    i === 32 || // space\n    i === 46 || // .\n    i === 44 || // ,\n    i === 45 || // -\n    i === 58 || // :\n    i === 95) {\n      // _\n      safe[i] = null;\n    }\n  }\n\n  return safe;\n}();","map":{"version":3,"sources":["C:/vidly/vidly/node_modules/hoek/lib/escape.js"],"names":["internals","exports","escapeHtml","input","escaped","i","length","charCode","charCodeAt","isSafe","escapeHtmlChar","escapeJson","lessThan","greaterThan","andSymbol","lineSeperator","replace","match","namedEscape","namedHtml","hexValue","Buffer","from","String","fromCharCode","toString","safeCharCodes","safe"],"mappings":"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","sourcesContent":["'use strict';\n\n// Declare internals\n\nconst internals = {};\n\n\nexports.escapeHtml = function (input) {\n\n    if (!input) {\n        return '';\n    }\n\n    let escaped = '';\n\n    for (let i = 0; i < input.length; ++i) {\n\n        const charCode = input.charCodeAt(i);\n\n        if (internals.isSafe(charCode)) {\n            escaped += input[i];\n        }\n        else {\n            escaped += internals.escapeHtmlChar(charCode);\n        }\n    }\n\n    return escaped;\n};\n\n\nexports.escapeJson = function (input) {\n\n    if (!input) {\n        return '';\n    }\n\n    const lessThan = 0x3C;\n    const greaterThan = 0x3E;\n    const andSymbol = 0x26;\n    const lineSeperator = 0x2028;\n\n    // replace method\n    let charCode;\n    return input.replace(/[<>&\\u2028\\u2029]/g, (match) => {\n\n        charCode = match.charCodeAt(0);\n\n        if (charCode === lessThan) {\n            return '\\\\u003c';\n        }\n\n        if (charCode === greaterThan) {\n            return '\\\\u003e';\n        }\n\n        if (charCode === andSymbol) {\n            return '\\\\u0026';\n        }\n\n        if (charCode === lineSeperator) {\n            return '\\\\u2028';\n        }\n\n        return '\\\\u2029';\n    });\n};\n\n\ninternals.escapeHtmlChar = function (charCode) {\n\n    const namedEscape = internals.namedHtml[charCode];\n    if (typeof namedEscape !== 'undefined') {\n        return namedEscape;\n    }\n\n    if (charCode >= 256) {\n        return '&#' + charCode + ';';\n    }\n\n    const hexValue = Buffer.from(String.fromCharCode(charCode), 'ascii').toString('hex');\n    return `&#x${hexValue};`;\n};\n\n\ninternals.isSafe = function (charCode) {\n\n    return (typeof internals.safeCharCodes[charCode] !== 'undefined');\n};\n\n\ninternals.namedHtml = {\n    '38': '&amp;',\n    '60': '&lt;',\n    '62': '&gt;',\n    '34': '&quot;',\n    '160': '&nbsp;',\n    '162': '&cent;',\n    '163': '&pound;',\n    '164': '&curren;',\n    '169': '&copy;',\n    '174': '&reg;'\n};\n\n\ninternals.safeCharCodes = (function () {\n\n    const safe = {};\n\n    for (let i = 32; i < 123; ++i) {\n\n        if ((i >= 97) ||                    // a-z\n            (i >= 65 && i <= 90) ||         // A-Z\n            (i >= 48 && i <= 57) ||         // 0-9\n            i === 32 ||                     // space\n            i === 46 ||                     // .\n            i === 44 ||                     // ,\n            i === 45 ||                     // -\n            i === 58 ||                     // :\n            i === 95) {                     // _\n\n            safe[i] = null;\n        }\n    }\n\n    return safe;\n}());\n"]},"metadata":{},"sourceType":"script"}